source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
B = matrix( c(4, 2, 7, 6), nrow=2, ncol=2)
makeCacheMatrix(B)
makeCacheMatrix(B)$set
makeCacheMatrix(B)$get
test <- makeCacheMatrix(B)$get
xyz <- test
xyz <- test()
xyz <- CreateInverse()
xyz <- makeCacheMatrix$CreateInverse()
xyz <- makeCacheMatrix$CreateInverse
xyz <- makeCacheMatrix()$CreateInverse
inverse <- xyz()
xyz <- makeCacheMatrix()$GetInverse
inverse2 <- xyz()
xyz <- makeCacheMatrix(B)$CreateInverse
inverse <- xyz()
result <- cachesolve(B)
result <- cacheSolve(B)
result <- cacheSolve(B)
result <- cacheSolve(makeCacheMatrix(B))
result <- cacheSolve(makeCacheMatrix(B))
result <- cacheSolve(makeCacheMatrix(B))
result <- cacheSolve(makeCacheMatrix(B))
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
result <- cacheSolve(makeCacheMatrix(B))
makeCacheMatrix(B)$CreateInverse
result <- cacheSolve(makeCacheMatrix(B))
result <- cacheSolve(makeCacheMatrix(B))
makeCacheMatrix(B)$CreateInverse
makeCacheMatrix(B)$CreateInverse
makeCacheMatrix(B)$get
cacheSolve(makeCacheMatrix(), B)
cacheSolve(makeCacheMatrix(), B)
cacheSolve(makeCacheMatrix(B))
makeCacheMatrix(B)
cacheSolve(makeCacheMatrix(B))
makeCacheMatrix(B)$CreateInverse
CreateInverse(B)
methods -> makeCacheMatrix(B)
methods <- makeCacheMatrix(B)
methods$CreateInverse(B)
methods$CreateInverse(B)
z <- methods$CreateInverse(B)
z <- methods$CreateInverse()
z <- methods$CreateInverse(B)
methods$set(B)
methods$get(B)
methods$get()
z <- methods$CreateInverse()
z <- methods$CreateInverse(B)
methods$CreateInverse(B)
methods$GetInverse(B)
methods$GetInverse()
debugSource('~/GitHub/ProgrammingAssignment2/cachematrix.R')
